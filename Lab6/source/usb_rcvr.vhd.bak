-- VHDL Entity My_Lib.usb_rcvr.symbol
--
-- Created:
--          by - mg34.bin (ecelinux23.ecn.purdue.edu)
--          at - 21:25:52 02/26/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY usb_rcvr IS
   PORT( 
      CLK      : IN     std_logic;
      D_MINUS  : IN     std_logic;
      D_PLUS   : IN     std_logic;
      RST_N    : IN     std_logic;
      R_ENABLE : IN     std_logic;
      EMPTY    : OUT    std_logic;
      FULL     : OUT    std_logic;
      RCVING   : OUT    std_logic;
      RDATA    : OUT    std_logic_vector (7 DOWNTO 0);
      R_ERROR  : OUT    std_logic
   );

-- Declarations

END usb_rcvr ;

--
-- VHDL Architecture My_Lib.usb_rcvr.struct
--
-- Created:
--          by - mg34.bin (ecelinux23.ecn.purdue.edu)
--          at - 21:25:52 02/26/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY ECE337_IP;
USE ECE337_IP.ALL;

LIBRARY My_Lib;

ARCHITECTURE struct OF usb_rcvr IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL D_EDGE       : std_logic;
   SIGNAL D_ORIG       : std_logic;
   SIGNAL EOP          : std_logic;
   SIGNAL RCV_DATA     : std_logic_vector(7 DOWNTO 0);
   SIGNAL SHIFT_ENABLE : std_logic;
   SIGNAL W_ENABLE     : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL RCVING_internal : std_logic;


   -- Component Declarations
   COMPONENT RCV_FIFO
   PORT (
      CLK      : IN     std_logic;
      RST_N    : IN     std_logic;
      R_ENABLE : IN     std_logic;
      WDATA    : IN     std_logic_vector (7 DOWNTO 0);
      W_ENABLE : IN     std_logic;
      EMPTY    : OUT    std_logic;
      FULL     : OUT    std_logic;
      RDATA    : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT decode
   PORT (
      CLK          : IN     std_logic;
      D_PLUS       : IN     std_logic;
      EOP          : IN     std_logic;
      RST_N        : IN     std_logic;
      SHIFT_ENABLE : IN     std_logic;
      D_ORIG       : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT edge_detect
   PORT (
      CLK    : IN     std_logic;
      D_PLUS : IN     std_logic;
      RST_N  : IN     std_logic;
      D_EDGE : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT eop_detect
   PORT (
      D_MINUS : IN     std_logic;
      D_PLUS  : IN     std_logic;
      EOP     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT rcu
   PORT (
      CLK          : IN     std_logic;
      D_EDGE       : IN     std_logic;
      EOP          : IN     std_logic;
      RCV_DATA     : IN     std_logic_vector (7 DOWNTO 0);
      RST_N        : IN     std_logic;
      SHIFT_ENABLE : IN     std_logic;
      RCVING       : OUT    std_logic;
      R_ERROR      : OUT    std_logic;
      W_ENABLE     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT shift_reg
   PORT (
      CLK          : IN     std_logic;
      D_ORIG       : IN     std_logic;
      RST_N        : IN     std_logic;
      SHIFT_ENABLE : IN     std_logic;
      RCV_DATA     : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT timer
   PORT (
      CLK          : IN     std_logic;
      D_EDGE       : IN     std_logic;
      RCVING       : IN     std_logic;
      RST_N        : IN     std_logic;
      SHIFT_ENABLE : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : RCV_FIFO USE ENTITY My_Lib.RCV_FIFO;
   FOR ALL : decode USE ENTITY My_Lib.decode;
   FOR ALL : edge_detect USE ENTITY My_Lib.edge_detect;
   FOR ALL : eop_detect USE ENTITY My_Lib.eop_detect;
   FOR ALL : rcu USE ENTITY My_Lib.rcu;
   FOR ALL : shift_reg USE ENTITY My_Lib.shift_reg;
   FOR ALL : timer USE ENTITY My_Lib.timer;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_3 : RCV_FIFO
      PORT MAP (
         CLK      => CLK,
         RST_N    => RST_N,
         R_ENABLE => R_ENABLE,
         W_ENABLE => W_ENABLE,
         WDATA    => RCV_DATA,
         RDATA    => RDATA,
         EMPTY    => EMPTY,
         FULL     => FULL
      );
   U_6 : decode
      PORT MAP (
         CLK          => CLK,
         RST_N        => RST_N,
         D_PLUS       => D_PLUS,
         SHIFT_ENABLE => SHIFT_ENABLE,
         EOP          => EOP,
         D_ORIG       => D_ORIG
      );
   U_5 : edge_detect
      PORT MAP (
         CLK    => CLK,
         RST_N  => RST_N,
         D_PLUS => D_PLUS,
         D_EDGE => D_EDGE
      );
   U_4 : eop_detect
      PORT MAP (
         D_PLUS  => D_PLUS,
         D_MINUS => D_MINUS,
         EOP     => EOP
      );
   U_2 : rcu
      PORT MAP (
         CLK          => CLK,
         RST_N        => RST_N,
         D_EDGE       => D_EDGE,
         EOP          => EOP,
         SHIFT_ENABLE => SHIFT_ENABLE,
         RCV_DATA     => RCV_DATA,
         RCVING       => RCVING_internal,
         W_ENABLE     => W_ENABLE,
         R_ERROR      => R_ERROR
      );
   U_1 : shift_reg
      PORT MAP (
         CLK          => CLK,
         RST_N        => RST_N,
         SHIFT_ENABLE => SHIFT_ENABLE,
         D_ORIG       => D_ORIG,
         RCV_DATA     => RCV_DATA
      );
   U_0 : timer
      PORT MAP (
         CLK          => CLK,
         RST_N        => RST_N,
         D_EDGE       => D_EDGE,
         RCVING       => RCVING_internal,
         SHIFT_ENABLE => SHIFT_ENABLE
      );

   -- Implicit buffered output assignments
   RCVING <= RCVING_internal;

END struct;
